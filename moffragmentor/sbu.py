# AUTOGENERATED! DO NOT EDIT! File to edit: 01_sbu.ipynb (unless otherwise specified).

__all__ = ['SBU', 'Node', 'Linker', 'get_binding_indices']

# Cell
from pymatgen.io.babel import BabelMolAdaptor
from openbabel import pybel as pb
from pymatgen import Molecule
import nglview

# Cell
class SBU:
    def __init__(self, molecule, connection_indices):
        self.molecule = molecule
        self._ob_mol = None

    @property
    def openbabel_mol(self):
        if self._ob_mol is not None:
            return self._ob_mol
        else:
            return self.get_openbabel_mol()

    @classmethod
    def from_labled_molecule(cls, mol):
        connection_indices = get_binding_indices(mol)
        return cls(mol, connection_indices)

    def get_openbabel_mol(self):
        a = BabelMolAdaptor(self.molecule)
        pm = pb.Molecule(a.openbabel_mol)
        self._ob_mol = pm
        return pm

    def show_molecule(self):
        return nglview.show_pymatgen(self.molecule)

    @property
    def smiles(self):
        mol = self.openbabel_mol
        return mol.write("can").strip()

# Cell
class Node(SBU):
    pass

#export
class Linker(SBU):
    pass

# Cell
def get_binding_indices(mol):
    indices = []
    for i, site in enumerate(mol):
        try:
            if site.properties['binding'] == True:
                indices.append(i)
        except KeyError:
            pass

    return indices